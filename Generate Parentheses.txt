class Solution {

    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList();
        backtrack(result, "", 0, 0,n);
        return result;
    }
    /*
    left and right represents the remaining number of ( and ) that need to be added. 
    When left > right, there are more ")" placed than "(". Such cases are wrong and the method stops. 
    */
    public void backtrack(List<String> result, String s, int open, int close, int max){
        if(s.length() == max*2){
            result.add(s);
            return;
        }


        if(open<max){
            backtrack(result,s+"(",open+1,close,max);

        }

        if(close<open){
            backtrack(result,s+")",open,close+1,max);
        }


    }
}